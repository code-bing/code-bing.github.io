{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"单例模式","slug":"单例模式","date":"2021-03-21T08:54:24.441Z","updated":"2021-03-21T09:46:53.962Z","comments":true,"path":"2021/03/21/单例模式/","link":"","permalink":"http://example.com/2021/03/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"为什么需要单例？ 一、节省内存，节省计算 二、保证结果正确、方便管理 单例使用场景？ 无状态工具类：如日志工具类 全局信息类：如记录访问次数 单例模式写法 饿汉式 懒汉式（线程不安全） 双重检查式 静态内部类 枚举（推荐写法） 其中枚举是最安全、性能最好的方式，首先它写法简洁、其次枚举类线程安全并且可以防止通过反序列化和反射生成多个实例。 示例： 123456789101112public class RpcClient &#123; private enum Singleton &#123; INSTANCE; private final RpcClient rpcNettyClient; Singleton() &#123; this.rpcNettyClient &#x3D; new RpcClient(); &#125; public RpcClient getInstance() &#123; return rpcNettyClient; &#125; &#125;&#125;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-03-21T06:49:21.625Z","updated":"2021-03-21T06:49:21.625Z","comments":true,"path":"2021/03/21/hello-world/","link":"","permalink":"http://example.com/2021/03/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}